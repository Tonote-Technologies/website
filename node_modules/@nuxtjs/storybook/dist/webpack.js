"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.getWebpackConfig = void 0;
// Config extends:
// - https://github.com/storybookjs/storybook/blob/master/lib/core/src/server/preview/base-webpack.config.js
// - https://github.com/storybookjs/storybook/blob/master/app/vue/src/server/framework-preset-vue.ts
function getWebpackConfig(config, extras) {
    // Merge Webpack plugins
    const nuxtFilteredPlugins = [
        'VueSSRClientPlugin',
        'ExtractCSS',
        // 'HotModuleReplacementPlugin',
        'HtmlWebpackPlugin',
        'ESLintWebpackPlugin'
    ];
    const nuxtFilteredEntries = [
        'webpack-hot-middleware',
        '.nuxt-storybook/client.js',
        'eventsource-polyfill'
    ];
    const storybookValidPlugins = [
        'VirtualModulesPlugin',
        'HtmlWebpackPlugin',
        'DefinePlugin' // Required because of https://storybook.js.org/docs/vue/configure/environment-variables
    ];
    config.entry = [
        ...extras.nuxtWebpackConfig.entry.app.filter(p => !nuxtFilteredEntries.some(np => p.includes(np))),
        ...config.entry
    ];
    // @ts-ignore
    // replace entry point
    const modules = config.plugins.find(p => p.constructor.name === 'VirtualModulesPlugin')._staticModules;
    Object.keys(modules).forEach((key) => {
        modules[key] = modules[key].replace(/@storybook\/vue/g, '~~/.nuxt-storybook/storybook/entry');
    });
    config.plugins = [
        ...config.plugins.filter(p => storybookValidPlugins.includes(p.constructor.name)),
        ...extras.nuxtWebpackConfig.plugins.filter(p => !nuxtFilteredPlugins.includes(p.constructor.name))
    ];
    const rules = config.module.rules
        .filter(rule => { var _a; return !/css|svg|mp/.test((_a = rule.test) === null || _a === void 0 ? void 0 : _a.toString()) && !/vue-loader/.test(String(rule.loader)); });
    // Nuxt rules
    config.module.rules = [
        ...rules,
        ...extras.nuxtWebpackConfig.module.rules
    ];
    // Set the correct public path for Vue to Support `@nuxtjs/composition-api`
    config.resolve.alias.vue = require.resolve('vue/dist/vue.js');
    // Set the correct public path for Vue to support Nuxt bridge
    config.resolve.alias.vue2 = require.resolve('vue/dist/vue.js');
    // Return the altered config
    return config;
}
exports.getWebpackConfig = getWebpackConfig;
